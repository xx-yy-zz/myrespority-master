<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <context:annotation-config></context:annotation-config>

    <!--配置可以匿名访问的资源-->

    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/js/**"></security:http>
    <!--指定login.html可以匿名访问-->
    <security:http security="none" pattern="/login.html" />
    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <security:intercept-url pattern="/index.jsp"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />
        <security:intercept-url pattern="/**"  access="hasRole('ROLE_ADMIN')" />
        <!--现在框架不认识这个登录页面为我们的登录页面,因此要加一些配置-->
        <!--指定那个页面-->
        <!--指定用户名 密码叫什么名字-->
        <!--登录表单提交的地址 拦截这个请求,这个地址交给了框架-->
        <!--登录成功之后要调到哪去-->
        <!--登录失败重新跳转到login.html-->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.jsp"
                             authentication-failure-url="/login.html"></security:form-login>

        <!--
            intercept-url：定义一个拦截规则,
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
				  请求的用户只需拥有其中的一个角色就能成功访问对应的URL
        -->
        <!--允许这个角色进行访问-->

        <!--只要认证通过就可以访问-->


        <security:csrf disabled="true"></security:csrf>

    </security:http>

    <!--
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <!--到底谁登录之后,有这个角色-->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService">

            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder" />

        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="userService" class="com.itheima.security.UserService"></bean>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />


</beans>